name: CD
on:
  push:
    branches: [master]
jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    steps:
      - name: Authenticate bot
        id: auth
        uses: tibdex/github-app-token@v2
        with:
          app_id: ${{ secrets.DEVOPS_BOT_APP_ID }}
          private_key: ${{ secrets.DEVOPS_BOT_PRIVATE_KEY }}
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ steps.auth.outputs.token }}
      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Create release
        id: release
        env:
          GITHUB_USER: ${{ secrets.DEVOPS_BOT_GIT_USER }}
          GITHUB_EMAIL: ${{ secrets.DEVOPS_BOT_GIT_EMAIL }}
          GITHUB_TOKEN: ${{ steps.auth.outputs.token }}
        run: |
          output=$(npx semantic-release)

          echo $output

          if [[ "$output" == *"There are no relevant changes, so no new version is released."* ]]; then
            echo "Skipped release due to no relevant changes since last release" >> $GITHUB_STEP_SUMMARY
          else
            version=$(echo "$output" | grep "The new version is" | awk '{print $NF}')
            echo $version
            major_version="$(cut -d '.' -f 1 <<< "${version}")"
            git config user.name "${GIT_USER}"
            git config user.email "${GIT_EMAIL}"
            git tag -fa ${major_version} -m "Map `${major_version}` to `${version}`"
            git push origin ${major_version} --force

            echo "Successfully released `${version}`" >> $GITHUB_STEP_SUMMARY
          fi
  notify:
    needs: [release]
    name: Notify
    if: always()
    runs-on: ubuntu-latest
    steps:
      - uses: andrewscwei/telegram-action@v1
        with:
          success: ${{ needs.release.result == 'success' }}
          cancelled: ${{ needs.release.result == 'cancelled' }}
          bot-token: ${{ secrets.TELEGRAM_DEVOPS_BOT_TOKEN }}
          chat-id: ${{ secrets.TELEGRAM_DEVOPS_CHAT_ID }}
